AWSTemplateFormatVersion: 2010-09-09

Description: >
  CloudFormation Template for Milliseconds Converter Application. This template creates Application Load Balancer 
  with Auto Scaling Group of Amazon Linux 2 (ami-0603cbe34fd08cb81) EC2 Instances which host Python Flask Web Application.
  EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup,
  and Application Load Balancer is placed within ALBSecurityGroup which allows http (80) connections from anywhere.
  WebServerASG Auto Scaling Group is using the WebServerLT Launch Template in order to spin up instances needed, 
  and WebServerLT Launch Template is configured to prepare Python Flask environment on EC2,
  and to deploy Milliseconds Converter Application on Flask Server after downloading the app code from Github repository.

Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for Flask Web Server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for Application Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebServerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData:
        ImageId: ami-0603cbe34fd08cb81
        InstanceType: t2.micro
        KeyName: firstkey
        SecurityGroupIds: 
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications: 
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName} Stack 
        UserData:
          Fn::Base64: 
            !Sub |
              #! /bin/bash
              yum update -y
              yum install python3 -y
              pip3 install flask
              wget -P templates https://raw.githubusercontent.com/TylerCounter/aws/master/projects/002-milliseconds-converter/templates/index.html
              wget -P templates https://raw.githubusercontent.com/TylerCounter/aws/master/projects/002-milliseconds-converter/templates/result.html
              wget https://raw.githubusercontent.com/TylerCounter/aws/master/projects/002-milliseconds-converter/milliseconds-converter-app.py
              python3 milliseconds-converter-app.py
  WebServerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !GetAtt WebServerSecurityGroup.VpcId
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - subnet-7e4af132
        - subnet-b49376df
        - subnet-cc7526b6
      Type: application
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref WebServerTG
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AvailabilityZones: 
        !GetAZs ""
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.LatestVersionNumber 
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs: 
        - !Ref WebServerTG
Outputs:
  WebsiteURL:
    Value: !Sub 
      - http://${ALBAddress}
      - ALBAddress: !GetAtt ApplicationLoadBalancer.DNSName
    Description: Milliseconds Converter Application Load Balancer URL
